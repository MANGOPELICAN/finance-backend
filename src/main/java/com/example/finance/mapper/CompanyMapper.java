package com.example.finance.mapper;

import com.example.finance.dto.CompanyCreateDTO;
import com.example.finance.dto.CompanyUpdateDTO;
import com.example.finance.dto.CompanyDTO;
import com.example.finance.model.Company;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;

/**
 * MapStruct mapper for converting between Company DTOs and the Company entity.
 * <ul>
 *   <li><strong>toEntity</strong> – create a new entity from a {@link CompanyCreateDTO}</li>
 *   <li><strong>updateEntity</strong> – merge a {@link CompanyUpdateDTO} into an existing entity</li>
 *   <li><strong>toDto</strong> – convert an entity to an outward-facing {@link CompanyDTO}</li>
 * </ul>
 */
@Mapper(componentModel = "spring")
public interface CompanyMapper {

    /* ---------- CREATE ---------- */

    /** Convert a create-DTO into a new {@link Company} entity. */
    @Mapping(target = "id",       ignore = true)       // PK generated by DB
    @Mapping(target = "password", source = "rawPassword")
    Company toEntity(CompanyCreateDTO dto);

    /* ---------- UPDATE ---------- */

    /** Merge an update-DTO into an existing {@link Company} entity. */
    @Mapping(target = "id",       ignore = true)       // never overwrite PK
    @Mapping(target = "password", ignore = true)       // handled manually
    void updateEntity(CompanyUpdateDTO dto, @MappingTarget Company entity);

    /* ---------- READ ---------- */

    /** Convert an entity to an outward-facing DTO. */
    CompanyDTO toDto(Company entity);
}
